/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.54
 * Generated at: 2020-05-20 02:10:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._04_005fmvc_005fboard_005fclass;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import mvc2.board.model.*;
import java.util.List;

public final class BoardListMvc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("mvc2.board.model");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
 String projectName = "/JSP"; 
      out.write("    \n");
      out.write("\n");
  //웹브라우저가 게시글 목록을 캐싱할 경우 새로운 글이 추가되더라도 새글이 목록에 안 보일 수 있기 때문에 설정
	response.setHeader("Pragma","No-cache");		// HTTP 1.0 version
	response.setHeader("Cache-Control","no-cache");	// HTTP 1.1 version
	response.setHeader("Cache-Control","no-store"); // 일부 파이어폭스 버스 관련
	response.setDateHeader("Expires", 1L);			// 현재 시간 이전으로 만료일을 지정함으로써 응답결과가 캐쉬되지 않도록 설정
	

      out.write('\n');
  
	// Control에서 param에 저장한 mList 변수에 지정
	List <BoardRec> mList = (List <BoardRec>)request.getAttribute("param"); //getAttribute는 object로 넘어와서 형변환을 해줘야한다.
	int totalPageCount = (int)request.getAttribute("page"); //getAttribute는 object로 넘어와서 형변환을 해줘야한다.

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("\t<title> 게시글 목록 </title>\n");
      out.write("</head>\n");
      out.write("<BODY>\n");
      out.write("\t<h3> 게시판 목록 </h3>\n");
      out.write("\t<table border=\"1\" bordercolor=\"darkblue\">\n");
      out.write("\t<tr>\n");
      out.write("\t\t<td> 글번호 </td>\n");
      out.write("\t\t<td> 제  목 </td>\n");
      out.write("\t\t<td> 작성자 </td>\n");
      out.write("\t\t<td> 작성일 </td>\n");
      out.write("\t\t<td> 조회수 </td>\n");
      out.write("\t</tr>\n");
      out.write("\t");
 if( mList.isEmpty() ) { 
      out.write("\n");
      out.write("\t\t<tr><td colspan=\"5\"> 등록된 게시물이 없습니다. </td></tr>\n");
      out.write("\t");
 } else { 
      out.write('\n');
      out.write('	');
      out.write('	');
 for(int i=0; i<mList.size(); i++) {
      out.write("\n");
      out.write("\t\t<tr>\n");
      out.write("\t\t\t<td>");
      out.print(mList.get(i).getArticleId());
      out.write("</td>\n");
      out.write("\t\t\t<td>\n");
      out.write("\t\t\t \t");
for(int j=0; j<mList.get(i).getLevel(); j++){ 
      out.write("\n");
      out.write("\t\t\t \t\t&nbsp;\n");
      out.write("\t\t\t \t");
} //end of for 
      out.write("\n");
      out.write("\t\t\t \t");
if(mList.get(i).getLevel()!=0){
      out.write("\n");
      out.write("\t\t\t \t\t<img src='imgs/board_re.gif'/>\n");
      out.write("\t\t\t \t");
} //end of if
      out.write("\n");
      out.write("\t\t\t\t <a href='");
      out.print(projectName);
      out.write("/BoardControl?cmd=view-page&aid=");
      out.print(mList.get(i).getArticleId());
      out.write("'>\n");
      out.write("\t\t\t\t ");
      out.print(mList.get(i).getTitle());
      out.write("\n");
      out.write("\t\t\t\t </a>\n");
      out.write("\t\t\t </td>\n");
      out.write("\t\t\t<td>");
      out.print(mList.get(i).getWriterName());
      out.write("</td>\n");
      out.write("\t\t\t<td>");
      out.print(mList.get(i).getPostingDate());
      out.write("</td>\n");
      out.write("\t\t\t<td>");
      out.print(mList.get(i).getReadCount());
      out.write("</td>\n");
      out.write("\t\t</tr>\n");
      out.write("\t\t");
 } //end for 
      out.write(' ');
      out.write('\n');
      out.write('	');
 } // end else 
      out.write("\n");
      out.write("\t\t<tr>\n");
      out.write("\t\t\t<td colspan=\"5\">\n");
      out.write("\t\t\t\t<a href=\"");
      out.print(projectName);
      out.write("/BoardControl?cmd=input-form\">글쓰기</a>\n");
      out.write("\t\t\t\t");
for(int i=1; i<=totalPageCount; i++){
      out.write("\n");
      out.write("\t\t\t\t<a href=");
      out.print(projectName);
      out.write("/BoardControl?cmd=list-page&page=");
      out.print(i );
      out.write('"');
      out.write('>');
      out.write('[');
      out.print(i );
      out.write("]</a>\n");
      out.write("\t\t\t\t");
 } // end of for
      out.write("\n");
      out.write("\t\t\t</td>\n");
      out.write("\t\t</tr>\n");
      out.write("\t</table>\n");
      out.write("</BODY>\n");
      out.write("</HTML>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
